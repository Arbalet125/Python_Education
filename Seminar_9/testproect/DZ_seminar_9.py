# Задача №1:
# Напишите функцию to_dict(lst), которая принимает аргумент в виде списка и возвращает словарь, 
# в котором каждый элемент списка является и ключом и значением.
# Предполагается, что элементы списка будут соответствовать правилам задания ключей в словарях.

# def to_dict(*args):
#     some_dict = {}
#     for i in args:
#         some_dict[i] = [i]
#     print(some_dict)
    
# to_dict(1, "Мария", 13.7, 126655)

# Задача №2:
# Иван решил создать самый большой словарь в мире. Для этого он придумал функцию biggest_dict(**kwargs), 
# которая принимает неограниченное количество параметров «ключ: значение» и обновляет созданный им словарь my_dict, 
# состоящий всего из одного элемента «first_one» со значением «we can do it». Воссоздайте эту функцию.

# some_dict = {'first_one': 'we can do it'}

# def biggest_dict(**kwargs):
#     some_dict.update(**kwargs)

# biggest_dict(pet="dog", name="Rex", age=14)
# print(some_dict)

#################################

# Задача №:
# Дана строка в виде случайной последовательности чисел от 0 до 9. Требуется создать словарь, 
# который в качестве ключей будет принимать данные числа (т. е. ключи будут типом int), 
# а в качестве значений – количество этих чисел в имеющейся последовательности. 
# Для построения словаря создайте функцию count_it(sequence), принимающую строку из цифр. 
# Функция должна возвратить словарь из 3-х самых часто встречаемых чисел. 

# def count_it(sequence):
#     my_dict = {int(val): sequence.count(val) for val in sequence}
#     dict_sorted = sorted(my_dict.items(), key=lambda val: val[1])
#     print(dict_sorted[-3:])

# count_it('122234444456678890')

#################################


# 4. Написать функцию thesaurus_adv(), принимающую в качестве аргументов строки 
# в формате «Имя Фамилия» и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари, 
# реализованные по схеме предыдущего задания и содержащие записи, в которых фамилия начинается с соответствующей буквы. 
# 

# def thesaurus_adv(*args):
#     my_dict = {}
#     for i in args:
#         name, second_name = i.split()
#         if not my_dict.get(second_name[0]):
#             my_dict[second_name[0]] = { name[0] : [i] }
#         elif not my_dict[second_name[0]].get(name[0]):
#             (my_dict[second_name[0]])[name[0]] = [i]
#         else:
#             (my_dict[second_name[0]])[name[0]].append(i)

#     print(my_dict)

# thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")